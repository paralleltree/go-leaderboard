// Code generated by MockGen. DO NOT EDIT.
// Source: unique_id_generator.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUniqueIdGenerator is a mock of UniqueIdGenerator interface.
type MockUniqueIdGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUniqueIdGeneratorMockRecorder
}

// MockUniqueIdGeneratorMockRecorder is the mock recorder for MockUniqueIdGenerator.
type MockUniqueIdGeneratorMockRecorder struct {
	mock *MockUniqueIdGenerator
}

// NewMockUniqueIdGenerator creates a new mock instance.
func NewMockUniqueIdGenerator(ctrl *gomock.Controller) *MockUniqueIdGenerator {
	mock := &MockUniqueIdGenerator{ctrl: ctrl}
	mock.recorder = &MockUniqueIdGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUniqueIdGenerator) EXPECT() *MockUniqueIdGeneratorMockRecorder {
	return m.recorder
}

// GenerateNewId mocks base method.
func (m *MockUniqueIdGenerator) GenerateNewId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewId indicates an expected call of GenerateNewId.
func (mr *MockUniqueIdGeneratorMockRecorder) GenerateNewId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewId", reflect.TypeOf((*MockUniqueIdGenerator)(nil).GenerateNewId))
}
