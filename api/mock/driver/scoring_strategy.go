// Code generated by MockGen. DO NOT EDIT.
// Source: scoring_strategy.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScoringStrategy is a mock of ScoringStrategy interface.
type MockScoringStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockScoringStrategyMockRecorder
}

// MockScoringStrategyMockRecorder is the mock recorder for MockScoringStrategy.
type MockScoringStrategyMockRecorder struct {
	mock *MockScoringStrategy
}

// NewMockScoringStrategy creates a new mock instance.
func NewMockScoringStrategy(ctrl *gomock.Controller) *MockScoringStrategy {
	mock := &MockScoringStrategy{ctrl: ctrl}
	mock.recorder = &MockScoringStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoringStrategy) EXPECT() *MockScoringStrategyMockRecorder {
	return m.recorder
}

// ComposeScore mocks base method.
func (m *MockScoringStrategy) ComposeScore(time, score int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComposeScore", time, score)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComposeScore indicates an expected call of ComposeScore.
func (mr *MockScoringStrategyMockRecorder) ComposeScore(time, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComposeScore", reflect.TypeOf((*MockScoringStrategy)(nil).ComposeScore), time, score)
}

// ExtractScore mocks base method.
func (m *MockScoringStrategy) ExtractScore(rawScore int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractScore", rawScore)
	ret0, _ := ret[0].(int64)
	return ret0
}

// ExtractScore indicates an expected call of ExtractScore.
func (mr *MockScoringStrategyMockRecorder) ExtractScore(rawScore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractScore", reflect.TypeOf((*MockScoringStrategy)(nil).ExtractScore), rawScore)
}
