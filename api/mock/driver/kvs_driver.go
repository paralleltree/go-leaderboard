// Code generated by MockGen. DO NOT EDIT.
// Source: kvs_driver.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	driver "github.com/paralleltree/go-leaderboard/internal/contract/driver"
)

// MockHashDriver is a mock of HashDriver interface.
type MockHashDriver struct {
	ctrl     *gomock.Controller
	recorder *MockHashDriverMockRecorder
}

// MockHashDriverMockRecorder is the mock recorder for MockHashDriver.
type MockHashDriverMockRecorder struct {
	mock *MockHashDriver
}

// NewMockHashDriver creates a new mock instance.
func NewMockHashDriver(ctrl *gomock.Controller) *MockHashDriver {
	mock := &MockHashDriver{ctrl: ctrl}
	mock.recorder = &MockHashDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashDriver) EXPECT() *MockHashDriverMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHashDriver) Get(ctx context.Context, key string) (map[string]string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockHashDriverMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHashDriver)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockHashDriver) Set(ctx context.Context, key string, fields map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockHashDriverMockRecorder) Set(ctx, key, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHashDriver)(nil).Set), ctx, key, fields)
}

// MockSortedSetDriver is a mock of SortedSetDriver interface.
type MockSortedSetDriver struct {
	ctrl     *gomock.Controller
	recorder *MockSortedSetDriverMockRecorder
}

// MockSortedSetDriverMockRecorder is the mock recorder for MockSortedSetDriver.
type MockSortedSetDriverMockRecorder struct {
	mock *MockSortedSetDriver
}

// NewMockSortedSetDriver creates a new mock instance.
func NewMockSortedSetDriver(ctrl *gomock.Controller) *MockSortedSetDriver {
	mock := &MockSortedSetDriver{ctrl: ctrl}
	mock.recorder = &MockSortedSetDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSortedSetDriver) EXPECT() *MockSortedSetDriverMockRecorder {
	return m.recorder
}

// GetRankByDescending mocks base method.
func (m *MockSortedSetDriver) GetRankByDescending(ctx context.Context, key, member string) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRankByDescending", ctx, key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRankByDescending indicates an expected call of GetRankByDescending.
func (mr *MockSortedSetDriverMockRecorder) GetRankByDescending(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankByDescending", reflect.TypeOf((*MockSortedSetDriver)(nil).GetRankByDescending), ctx, key, member)
}

// GetRankedList mocks base method.
func (m *MockSortedSetDriver) GetRankedList(ctx context.Context, key string, start, stop int64) ([]driver.SortedSetItem, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRankedList", ctx, key, start, stop)
	ret0, _ := ret[0].([]driver.SortedSetItem)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRankedList indicates an expected call of GetRankedList.
func (mr *MockSortedSetDriverMockRecorder) GetRankedList(ctx, key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankedList", reflect.TypeOf((*MockSortedSetDriver)(nil).GetRankedList), ctx, key, start, stop)
}

// GetScore mocks base method.
func (m *MockSortedSetDriver) GetScore(ctx context.Context, key, member string) (float64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", ctx, key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetScore indicates an expected call of GetScore.
func (mr *MockSortedSetDriverMockRecorder) GetScore(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockSortedSetDriver)(nil).GetScore), ctx, key, member)
}

// SetScore mocks base method.
func (m *MockSortedSetDriver) SetScore(ctx context.Context, key, member string, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScore", ctx, key, member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScore indicates an expected call of SetScore.
func (mr *MockSortedSetDriverMockRecorder) SetScore(ctx, key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScore", reflect.TypeOf((*MockSortedSetDriver)(nil).SetScore), ctx, key, member, score)
}
