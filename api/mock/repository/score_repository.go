// Code generated by MockGen. DO NOT EDIT.
// Source: score_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/paralleltree/go-leaderboard/internal/contract/repository"
)

// MockScoreRepository is a mock of ScoreRepository interface.
type MockScoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScoreRepositoryMockRecorder
}

// MockScoreRepositoryMockRecorder is the mock recorder for MockScoreRepository.
type MockScoreRepositoryMockRecorder struct {
	mock *MockScoreRepository
}

// NewMockScoreRepository creates a new mock instance.
func NewMockScoreRepository(ctrl *gomock.Controller) *MockScoreRepository {
	mock := &MockScoreRepository{ctrl: ctrl}
	mock.recorder = &MockScoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreRepository) EXPECT() *MockScoreRepositoryMockRecorder {
	return m.recorder
}

// GetLeaderboard mocks base method.
func (m *MockScoreRepository) GetLeaderboard(ctx context.Context, eventId string, startRank, endRank int64) ([]repository.UserRank, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderboard", ctx, eventId, startRank, endRank)
	ret0, _ := ret[0].([]repository.UserRank)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLeaderboard indicates an expected call of GetLeaderboard.
func (mr *MockScoreRepositoryMockRecorder) GetLeaderboard(ctx, eventId, startRank, endRank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderboard", reflect.TypeOf((*MockScoreRepository)(nil).GetLeaderboard), ctx, eventId, startRank, endRank)
}

// GetRank mocks base method.
func (m *MockScoreRepository) GetRank(ctx context.Context, eventId, userId string) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRank", ctx, eventId, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRank indicates an expected call of GetRank.
func (mr *MockScoreRepositoryMockRecorder) GetRank(ctx, eventId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRank", reflect.TypeOf((*MockScoreRepository)(nil).GetRank), ctx, eventId, userId)
}

// GetScore mocks base method.
func (m *MockScoreRepository) GetScore(ctx context.Context, eventId, userId string) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", ctx, eventId, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetScore indicates an expected call of GetScore.
func (mr *MockScoreRepositoryMockRecorder) GetScore(ctx, eventId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockScoreRepository)(nil).GetScore), ctx, eventId, userId)
}

// SetScore mocks base method.
func (m *MockScoreRepository) SetScore(ctx context.Context, eventId, userId string, score, time int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScore", ctx, eventId, userId, score, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScore indicates an expected call of SetScore.
func (mr *MockScoreRepositoryMockRecorder) SetScore(ctx, eventId, userId, score, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScore", reflect.TypeOf((*MockScoreRepository)(nil).SetScore), ctx, eventId, userId, score, time)
}
