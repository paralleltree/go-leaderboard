// Code generated by MockGen. DO NOT EDIT.
// Source: register_event_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/paralleltree/go-leaderboard/internal/model"
)

// MockRegisterEventUsecase is a mock of RegisterEventUsecase interface.
type MockRegisterEventUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterEventUsecaseMockRecorder
}

// MockRegisterEventUsecaseMockRecorder is the mock recorder for MockRegisterEventUsecase.
type MockRegisterEventUsecaseMockRecorder struct {
	mock *MockRegisterEventUsecase
}

// NewMockRegisterEventUsecase creates a new mock instance.
func NewMockRegisterEventUsecase(ctrl *gomock.Controller) *MockRegisterEventUsecase {
	mock := &MockRegisterEventUsecase{ctrl: ctrl}
	mock.recorder = &MockRegisterEventUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterEventUsecase) EXPECT() *MockRegisterEventUsecaseMockRecorder {
	return m.recorder
}

// RegisterEvent mocks base method.
func (m *MockRegisterEventUsecase) RegisterEvent(ctx context.Context, event model.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEvent", ctx, event)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEvent indicates an expected call of RegisterEvent.
func (mr *MockRegisterEventUsecaseMockRecorder) RegisterEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEvent", reflect.TypeOf((*MockRegisterEventUsecase)(nil).RegisterEvent), ctx, event)
}
