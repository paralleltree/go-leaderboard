// Code generated by MockGen. DO NOT EDIT.
// Source: get_leaderboard_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/paralleltree/go-leaderboard/internal/model"
)

// MockGetLeaderboardUsecase is a mock of GetLeaderboardUsecase interface.
type MockGetLeaderboardUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetLeaderboardUsecaseMockRecorder
}

// MockGetLeaderboardUsecaseMockRecorder is the mock recorder for MockGetLeaderboardUsecase.
type MockGetLeaderboardUsecaseMockRecorder struct {
	mock *MockGetLeaderboardUsecase
}

// NewMockGetLeaderboardUsecase creates a new mock instance.
func NewMockGetLeaderboardUsecase(ctrl *gomock.Controller) *MockGetLeaderboardUsecase {
	mock := &MockGetLeaderboardUsecase{ctrl: ctrl}
	mock.recorder = &MockGetLeaderboardUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetLeaderboardUsecase) EXPECT() *MockGetLeaderboardUsecaseMockRecorder {
	return m.recorder
}

// GetLeaderboard mocks base method.
func (m *MockGetLeaderboardUsecase) GetLeaderboard(ctx context.Context, eventId string, startRank, endRank int64) ([]model.UserRank, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderboard", ctx, eventId, startRank, endRank)
	ret0, _ := ret[0].([]model.UserRank)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLeaderboard indicates an expected call of GetLeaderboard.
func (mr *MockGetLeaderboardUsecaseMockRecorder) GetLeaderboard(ctx, eventId, startRank, endRank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderboard", reflect.TypeOf((*MockGetLeaderboardUsecase)(nil).GetLeaderboard), ctx, eventId, startRank, endRank)
}
