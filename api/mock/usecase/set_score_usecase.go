// Code generated by MockGen. DO NOT EDIT.
// Source: set_score_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSetScoreUsecase is a mock of SetScoreUsecase interface.
type MockSetScoreUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSetScoreUsecaseMockRecorder
}

// MockSetScoreUsecaseMockRecorder is the mock recorder for MockSetScoreUsecase.
type MockSetScoreUsecaseMockRecorder struct {
	mock *MockSetScoreUsecase
}

// NewMockSetScoreUsecase creates a new mock instance.
func NewMockSetScoreUsecase(ctrl *gomock.Controller) *MockSetScoreUsecase {
	mock := &MockSetScoreUsecase{ctrl: ctrl}
	mock.recorder = &MockSetScoreUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetScoreUsecase) EXPECT() *MockSetScoreUsecaseMockRecorder {
	return m.recorder
}

// SetScore mocks base method.
func (m *MockSetScoreUsecase) SetScore(ctx context.Context, eventId, userId string, score int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScore", ctx, eventId, userId, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScore indicates an expected call of SetScore.
func (mr *MockSetScoreUsecaseMockRecorder) SetScore(ctx, eventId, userId, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScore", reflect.TypeOf((*MockSetScoreUsecase)(nil).SetScore), ctx, eventId, userId, score)
}
